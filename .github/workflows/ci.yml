name: CI

on:
  push:
    branches: [test]
  pull_request:
    branches: [test]

env:
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
  DB_USER_PASS: ${{ secrets.DB_USER_PASS }}
  # REACT_APP_URL_API: ${{ vars.REACT_APP_LOCAL_URL_API }}

jobs:
  Jest-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 20

      - name: Install front dependencies
        run: |
          cd client
          npm ci

      - name: Install back dependencies
        run: |
          cd server
          npm ci

      - name: Create .env files
        run: |
          echo "REACT_APP_URL_API=${{ vars.REACT_APP_LOCAL_URL_API }}" > ./server/config/.env
          cqt ./server/config/.env

      - name: Create rapports directory if not exists
        run: mkdir -p rapports
        working-directory: server

      - name: Create rapports directory if not exists
        run: mkdir -p rapports
        working-directory: client

      - name: Run back Jest tests
        run: |
          cd server
          npm test
          mv ./test-report.html ./back-jest-report.html

      - name: run back server
        run: |
          cd server
          npm run watch &

      - name: Run front Jest tests
        run: |
          cd client
          npm test
          mv ./test-report.html ./front-jest-report.html

      - name: Upload reports
        uses: actions/upload-artifact@v3
        with:
          name: jest reports
          path: |
            ./client/front-jest-report.html
            ./server/back-jest-report.html

  Eslint-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 20

      - name: Install front dependencies
        run: |
          npm ci
        working-directory: client

      - name: Install back dependencies
        run: |
          npm ci
        working-directory: server

      - name: Where am i
        run: |
          pwd
          ls

      - name: Where am i server
        run: |
          pwd
          ls -la
        working-directory: server

      - name: Where am i client
        run: |
          pwd
          ls -la
        working-directory: client

      - name: Create eslint directory if not exists
        run: mkdir -p eslint
        working-directory: server

      - name: Create eslint directory if not exists
        run: mkdir -p eslint
        working-directory: client

      - name: Run front Eslint test
        run: |
          npm run lint || true
        working-directory: client

      - name: Run back Eslint test
        run: |
          npm run lint || true
        working-directory: server

      - name: Eslint reports
        uses: actions/upload-artifact@v3
        with:
          name: eslint reports
          path: |
            client/eslint-report.html
            server/eslint-report.html

  build-and-push:
    needs: [Jest-tests, Eslint-test]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 20

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Install front dependencies
        run: |
          cd client
          npm install

      - name: Create .env files
        run: |
          echo "DB_USER_PASS=${{ secrets.DB_USER_PASS }}" > ./server/config/.env
          echo "REACT_APP_URL_API=${{ secrets.REACT_APP_URL_API }}" > ./client/.env
          cat ./server/config/.env
          cat ./client/.env

      - name: Build front
        if: ${{ success() }}
        run: |
          cd client
          npm run build

      - name: Build and push front
        uses: docker/build-push-action@v2
        with:
          context: ./client/
          file: ./client/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ vars.DOCKER_FRONT }}:${{ vars.DOCKER_FRONT_VERSION }}

      - name: Build and push back
        uses: docker/build-push-action@v2
        with:
          context: ./server/
          file: ./server/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ vars.DOCKER_BACK }}:${{ vars.DOCKER_BACK_VERSION }}

      # - name: Build Docker images and push to Docker Hub
      #   run: |
      #     docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      #     docker build ./client -t ${{ secrets.DOCKER_HUB_USERNAME }}/${{ vars.DOCKER_FRONT }}:${{ vars.DOCKER_FRONT_VERSION }}
      #     docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ vars.DOCKER_FRONT }}:${{ vars.DOCKER_FRONT_VERSION }}
      #     docker build ./server -t ${{ secrets.DOCKER_HUB_USERNAME }}/${{ vars.DOCKER_BACK }}:${{ vars.DOCKER_BACK_VERSION }}
      #     docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ vars.DOCKER_BACK }}:${{ vars.DOCKER_BACK_VERSION }}
